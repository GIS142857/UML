<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36" version="26.1.0">
  <diagram name="Page-1" id="XIQBZxarDAWP2gHNoE1S">
    <mxGraphModel dx="2575" dy="1208" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="6Az1kvPyN0crVKq7ssyA-2" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;b&gt;客户端请求过程&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="580" y="280" width="150" height="60" as="geometry" />
        </mxCell>
        <mxCell id="6Az1kvPyN0crVKq7ssyA-3" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;b&gt;服务端响应过程&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="2120" y="280" width="150" height="60" as="geometry" />
        </mxCell>
        <mxCell id="6Az1kvPyN0crVKq7ssyA-4" value="&lt;div style=&quot;color: #f8f8f2;background-color: #272822;font-family: Menlo, Monaco, &#39;Courier New&#39;, monospace;font-weight: normal;font-size: 18px;line-height: 27px;white-space: pre;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;struct&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    svcInfo &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;serviceinfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;ServiceInfo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    eps     &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;endpoint&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;UnaryEndpoint&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    sEps    &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;cep&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;StreamEndpoint&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    opt &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;client&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;Options&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    lbf &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;lbcache&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;BalancerFactory&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    inited &lt;/span&gt;&lt;span style=&quot;color: #66d9ef;font-style: italic;&quot;&gt;bool&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    closed &lt;/span&gt;&lt;span style=&quot;color: #66d9ef;font-style: italic;&quot;&gt;bool&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// Set finalizer on kClient does not take effect, because kClient has a circular reference problem&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// when construct the endpoint.Endpoint in the invokeHandleEndpoint,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// so wrapping kClient as kcFinalizerClient, and set finalizer on kcFinalizerClient, it can solve this problem.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kcFinalizerClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;struct&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kClient&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;func&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;kf &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kcFinalizerClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;Call&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;ctx&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;context&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;Context&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;method&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #66d9ef;font-style: italic;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;request&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;response&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;interface&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;{}) &lt;/span&gt;&lt;span style=&quot;color: #66d9ef;font-style: italic;&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;defer&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; runtime.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;KeepAlive&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(kf)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kf.kClient.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;Call&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, method, request, response)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="210" y="900" width="1210" height="630" as="geometry" />
        </mxCell>
        <UserObject label="&lt;div style=&quot;color: #f8f8f2;background-color: #272822;font-family: Menlo, Monaco, &#39;Courier New&#39;, monospace;font-weight: normal;font-size: 18px;line-height: 27px;white-space: pre;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;func&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;NewClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;svcInfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;serviceinfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;ServiceInfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;opts&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;Option&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;) (&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;Client&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #66d9ef;font-style: italic;&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; svcInfo &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, errors.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;New&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;NewClient: no service info&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    kc &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;:=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kcFinalizerClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;{kClient: &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;{}}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    kc.svcInfo &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; svcInfo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    kc.opt &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; client.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;NewOptions&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(opts)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; err &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;:=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;init&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(); err &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        _ &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;Close&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, err&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// like os.File, if kc is garbage-collected, but Close is not called, call Close.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    runtime.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;SetFinalizer&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(kc, &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;func&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;c&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kcFinalizerClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        _ &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; c.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;Close&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    })&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc, &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" link="&lt;div style=&quot;color: #f8f8f2;background-color: #272822;font-family: Menlo, Monaco, &#39;Courier New&#39;, monospace;font-weight: normal;font-size: 18px;line-height: 27px;white-space: pre;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;func&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;NewClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;svcInfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;serviceinfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;ServiceInfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;opts&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;Option&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;) (&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;Client&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #66d9ef;font-style: italic;&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; svcInfo &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, errors.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;New&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;NewClient: no service info&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    kc &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;:=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kcFinalizerClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;{kClient: &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;{}}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    kc.svcInfo &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; svcInfo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    kc.opt &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; client.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;NewOptions&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(opts)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; err &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;:=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;init&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(); err &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        _ &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;Close&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, err&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// like os.File, if kc is garbage-collected, but Close is not called, call Close.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    runtime.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;SetFinalizer&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(kc, &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;func&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;c&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kcFinalizerClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        _ &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; c.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;Close&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    })&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc, &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" id="6Az1kvPyN0crVKq7ssyA-5">
          <mxCell style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
            <mxGeometry x="210" y="380" width="930" height="470" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="6Az1kvPyN0crVKq7ssyA-6" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;b&gt;客户端初始化&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="40" y="570" width="150" height="60" as="geometry" />
        </mxCell>
        <mxCell id="6Az1kvPyN0crVKq7ssyA-7" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;b&gt;请求发送&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="40" y="1430" width="150" height="60" as="geometry" />
        </mxCell>
        <mxCell id="6Az1kvPyN0crVKq7ssyA-8" value="" style="endArrow=classic;html=1;rounded=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.384;entryY=0.006;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="6Az1kvPyN0crVKq7ssyA-5" target="6Az1kvPyN0crVKq7ssyA-4">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="370" y="1050" as="sourcePoint" />
            <mxPoint x="420" y="1000" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <UserObject label="&lt;div style=&quot;color: rgb(248, 248, 242); background-color: rgb(39, 40, 34); font-family: Menlo, Monaco, &amp;quot;Courier New&amp;quot;, monospace; font-weight: normal; font-size: 18px; line-height: 27px; white-space: pre;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;func&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: rgb(253, 151, 31); font-style: italic;&quot;&gt;kc &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46); text-decoration: underline;&quot;&gt;kClient&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;Call&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(253, 151, 31); font-style: italic;&quot;&gt;ctx&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46); text-decoration: underline;&quot;&gt;context&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46); text-decoration: underline;&quot;&gt;Context&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(253, 151, 31); font-style: italic;&quot;&gt;method&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(102, 217, 239); font-style: italic;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(253, 151, 31); font-style: italic;&quot;&gt;request&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(253, 151, 31); font-style: italic;&quot;&gt;response&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;interface&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;{}) (&lt;/span&gt;&lt;span style=&quot;color: rgb(253, 151, 31); font-style: italic;&quot;&gt;err&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(102, 217, 239); font-style: italic;&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// merge backup context if no metainfo found in ctx&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    ctx &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; backup.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;RecoverCtxOnDemands&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx, kc.opt.CtxBackupHandler)&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;validateForCall&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx, kc.inited, kc.closed)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;var&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; ri &lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46); text-decoration: underline;&quot;&gt;rpcinfo&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46); text-decoration: underline;&quot;&gt;RPCInfo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;var&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; callOpts &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46); text-decoration: underline;&quot;&gt;callopt&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46); text-decoration: underline;&quot;&gt;CallOptions&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    ctx, ri, callOpts &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; kc.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;initRPCInfo&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx, method, &lt;/span&gt;&lt;span style=&quot;color: rgb(174, 129, 255);&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(174, 129, 255);&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    ctx &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; kc.opt.TracerCtl.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;DoStart&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx, ri)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;var&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; reportErr &lt;/span&gt;&lt;span style=&quot;color: rgb(102, 217, 239); font-style: italic;&quot;&gt;error&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;var&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; recycleRI &lt;/span&gt;&lt;span style=&quot;color: rgb(102, 217, 239); font-style: italic;&quot;&gt;bool&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;defer&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;func&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;() {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; panicInfo &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;:=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;recover&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(); panicInfo &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(174, 129, 255);&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            err &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; rpcinfo.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;ClientPanicToErr&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx, panicInfo, ri, &lt;/span&gt;&lt;span style=&quot;color: rgb(174, 129, 255);&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            reportErr &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; err&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        kc.opt.TracerCtl.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;DoFinish&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx, ri, reportErr)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; recycleRI {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// why need check recycleRI to decide if recycle RPCInfo?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// 1. no retry, rpc timeout happen will cause panic when response return&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// 2. retry success, will cause panic when first call return&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// 3. backup request may cause panic, cannot recycle first RPCInfo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// RPCInfo will be recycled after rpc is finished,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// holding RPCInfo in a new goroutine is forbidden.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            rpcinfo.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;PutRPCInfo&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ri)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        callOpts.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;Recycle&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    }()&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    callOptRetry &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;:=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;getCalloptRetryPolicy&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(callOpts)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; kc.opt.UnaryOptions.RetryContainer &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(174, 129, 255);&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; callOptRetry &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(174, 129, 255);&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; callOptRetry.Enable {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// setup retry in callopt&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        kc.opt.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;InitRetryContainer&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// Add necessary keys to context for isolation between kitex client method calls&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    ctx &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; retry.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;PrepareRetryContext&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx)&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; kc.opt.UnaryOptions.RetryContainer &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(174, 129, 255);&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// call without retry policy&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        err &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; kc.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;eps&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx, request, response)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; err &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(174, 129, 255);&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            recycleRI &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(174, 129, 255);&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    } &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;var&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; lastRI &lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46); text-decoration: underline;&quot;&gt;rpcinfo&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46); text-decoration: underline;&quot;&gt;RPCInfo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        lastRI, recycleRI, err &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; kc.opt.UnaryOptions.RetryContainer.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;WithRetryIfNeeded&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx, callOptRetry, &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;kc.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;rpcCallWithRetry&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ri, method, request, response), ri, request)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; ri &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; lastRI {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// reset ri of ctx to lastRI&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;            ctx &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; rpcinfo.&lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;NewCtxWithRPCInfo&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx, lastRI)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;        ri &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; lastRI&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(136, 132, 111);&quot;&gt;// do fallback if with setup&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    err, reportErr &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(166, 226, 46);&quot;&gt;doFallbackIfNeeded&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;(ctx, ri, request, response, err, kc.opt.UnaryOptions.Fallback, callOpts)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(249, 38, 114);&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt; err&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(248, 248, 242);&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" link="&lt;div style=&quot;color: #f8f8f2;background-color: #272822;font-family: Menlo, Monaco, &#39;Courier New&#39;, monospace;font-weight: normal;font-size: 18px;line-height: 27px;white-space: pre;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;func&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;kc &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;kClient&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;) &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;Call&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;ctx&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;context&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;Context&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;method&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #66d9ef;font-style: italic;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;request&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;response&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;interface&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;{}) (&lt;/span&gt;&lt;span style=&quot;color: #fd971f;font-style: italic;&quot;&gt;err&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #66d9ef;font-style: italic;&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// merge backup context if no metainfo found in ctx&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    ctx &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; backup.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;RecoverCtxOnDemands&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, kc.opt.CtxBackupHandler)&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;validateForCall&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, kc.inited, kc.closed)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;var&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; ri &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;rpcinfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;RPCInfo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;var&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; callOpts &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;callopt&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;CallOptions&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    ctx, ri, callOpts &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;initRPCInfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, method, &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    ctx &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc.opt.TracerCtl.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;DoStart&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, ri)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;var&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; reportErr &lt;/span&gt;&lt;span style=&quot;color: #66d9ef;font-style: italic;&quot;&gt;error&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;var&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; recycleRI &lt;/span&gt;&lt;span style=&quot;color: #66d9ef;font-style: italic;&quot;&gt;bool&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;defer&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;func&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;() {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; panicInfo &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;:=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;recover&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(); panicInfo &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            err &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; rpcinfo.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;ClientPanicToErr&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, panicInfo, ri, &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            reportErr &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; err&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        kc.opt.TracerCtl.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;DoFinish&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, ri, reportErr)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; recycleRI {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// why need check recycleRI to decide if recycle RPCInfo?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// 1. no retry, rpc timeout happen will cause panic when response return&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// 2. retry success, will cause panic when first call return&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// 3. backup request may cause panic, cannot recycle first RPCInfo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// RPCInfo will be recycled after rpc is finished,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// holding RPCInfo in a new goroutine is forbidden.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            rpcinfo.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;PutRPCInfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ri)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        callOpts.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;Recycle&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    }()&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    callOptRetry &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;:=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;getCalloptRetryPolicy&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(callOpts)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc.opt.UnaryOptions.RetryContainer &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; callOptRetry &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; callOptRetry.Enable {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// setup retry in callopt&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        kc.opt.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;InitRetryContainer&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// Add necessary keys to context for isolation between kitex client method calls&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    ctx &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; retry.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;PrepareRetryContext&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx)&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc.opt.UnaryOptions.RetryContainer &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// call without retry policy&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        err &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;eps&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, request, response)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; err &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;==&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            recycleRI &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    } &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;var&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; lastRI &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;rpcinfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;text-decoration: underline;&quot;&gt;RPCInfo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        lastRI, recycleRI, err &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; kc.opt.UnaryOptions.RetryContainer.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;WithRetryIfNeeded&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, callOptRetry, kc.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;rpcCallWithRetry&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ri, method, request, response), ri, request)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; ri &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;!=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; lastRI {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// reset ri of ctx to lastRI&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;            ctx &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; rpcinfo.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;NewCtxWithRPCInfo&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, lastRI)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;        ri &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; lastRI&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #88846f;&quot;&gt;// do fallback if with setup&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    err, reportErr &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #a6e22e;&quot;&gt;doFallbackIfNeeded&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(ctx, ri, request, response, err, kc.opt.UnaryOptions.Fallback, callOpts)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; err&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" id="6Az1kvPyN0crVKq7ssyA-9">
          <mxCell style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
            <mxGeometry x="210" y="1530" width="1220" height="1620" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
